                            | #######################################################################
                            | # Test for copying block of size 1;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f42803000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20100000000000000 | 	irmovq $1, %rdx		# src and dst have 1 elements
0x014: 30f69802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 801201000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax      	# count = 0;
0x03d: 6222                 |     andq %rdx,%rdx      	# len <= 0?
0x03f: 711101000000000000   |     jle Done        		# if so, goto Done:
0x048: c0f2feffffffffffffff | 	iaddq $-2, %rdx
                            | 
0x052:                      | Loop:   
0x052: 50a70000000000000000 |     mrmovq (%rdi), %r10     # read val from src…
0x05c: 50b70800000000000000 |     mrmovq 0x8(%rdi), %r11  # <- from class get second value
                            | 
                            | 	# potential penalty for accessing %r10
                            | 
0x066: 40a60000000000000000 |     rmmovq %r10, (%rsi)     # ...and store it to dst
                            | 
                            | 	# potential penalty for accessing %r11
                            | 
0x070: 40b60800000000000000 |     rmmovq %r11, 0x8(%rsi)  # store second val to dst
                            | 	# Check value of first
0x07a: 62aa                 |     andq %r10, %r10     	# val <= 0?
0x07c: 718f00000000000000   |     jle Npos            	# if so, don't iterate count
0x085: c0f00100000000000000 |     iaddq $1, %rax			# count++
                            | 
0x08f:                      | Npos:   
                            | 	# Checks second value
0x08f: 62bb                 |     andq %r11, %r11 		# check if src[1] <= 0
0x091: 71a400000000000000   |     jle Npos2       		# if so don’t iterate count
0x09a: c0f00100000000000000 |     iaddq $1, %rax			# count++
                            | 
0x0a4:                      | Npos2: 
                            | 	# Used iaddq to decrement so we used fewer instructions
                            |     #irmovq $2, %r10			# setting the length being copied in iteration
0x0a4: c0f71000000000000000 |     iaddq $16, %rdi     	# increase stack or base pointer to get next 2 vals
0x0ae: c0f61000000000000000 |     iaddq $16, %rsi     	# increase stack or base pointer to store next 2 vals
                            |     #subq %r10, %rdx     	# decrease length by 2
0x0b8: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x0c2: 755200000000000000   |     jge Loop            	# go back into loop if length >= 2
                            | 
0x0cb:                      | len_cleanup:
0x0cb: c0f20200000000000000 |     iaddq $2, %rdx
                            | 
0x0d5:                      | cleanup:
                            |     #irmovq $1, %r10
                            |     #subq %r10, %rdx
                            | 	# Using the iaddq we saved an instruction step
0x0d5: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x0df: 721101000000000000   |     jl Done             	# if length < 0, jmp to Done, no cleanup needed
0x0e8: 50a70000000000000000 |     mrmovq (%rdi), %r10     # get next val
0x0f2: 40a60000000000000000 |     rmmovq %r10, (%rsi)     # move val onto stack
0x0fc: 62aa                 |     andq %r10, %r10     	# check if val <= 0
0x0fe: 711101000000000000   |     jle Done            	# skip count if val < 0
0x107: c0f00100000000000000 |     iaddq $1, %rax      	# same as iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x111:                      | Done:
0x111: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x112:                      | End:
                            | #/* $end ncopy-ys */
0x112:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 1.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x112:                      | check:
                            | 	# Return value test
0x112: 30fa0100000000000000 | 	irmovq $1,%r10
0x11c: 61a0                 | 	subq %r10,%rax
0x11e: 733a01000000000000   | 	je checkb
0x127: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x131: 707802000000000000   | 	jmp cdone
0x13a:                      | checkb:
                            | 	# Code length check
0x13a: 30f01201000000000000 | 	irmovq EndFun,%rax
0x144: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x14e: 6120                 | 	subq %rdx,%rax
0x150: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x15a: 6102                 | 	subq %rax,%rdx
0x15c: 757801000000000000   | 	jge checkm
0x165: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x16f: 707802000000000000   | 	jmp cdone
0x178:                      | checkm:
0x178: 30f29802000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x182: 30f38002000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x18c: 30f70100000000000000 | 	irmovq $1,%rdi  # Count
0x196: 6277                 | 	andq %rdi,%rdi
0x198: 73f601000000000000   | 	je checkpre         # Skip check if count = 0
0x1a1:                      | mcloop:
0x1a1: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x1ab: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x1b5: 6160                 | 	subq %rsi,%rax
0x1b7: 73d301000000000000   | 	je  mok
0x1c0: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x1ca: 707802000000000000   | 	jmp cdone
0x1d3:                      | mok:
0x1d3: 30f00800000000000000 | 	irmovq $8,%rax
0x1dd: 6002                 | 	addq %rax,%rdx	  # dest ++
0x1df: 6003                 | 	addq %rax,%rbx    # src++
0x1e1: 30f00100000000000000 | 	irmovq $1,%rax
0x1eb: 6107                 | 	subq %rax,%rdi    # cnt--
0x1ed: 76a101000000000000   | 	jg mcloop
0x1f6:                      | checkpre:
                            | 	# Check for corruption
0x1f6: 30f29002000000000000 | 	irmovq Predest,%rdx
0x200: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x20a: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x214: 6120                 | 	subq %rdx,%rax
0x216: 733202000000000000   | 	je checkpost
0x21f: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x229: 707802000000000000   | 	jmp cdone
0x232:                      | checkpost:
                            | 	# Check for corruption
0x232: 30f2a002000000000000 | 	irmovq Postdest,%rdx
0x23c: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x246: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x250: 6120                 | 	subq %rdx,%rax
0x252: 736e02000000000000   | 	je checkok
0x25b: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x265: 707802000000000000   | 	jmp cdone
0x26e:                      | checkok:
                            | 	# Successful checks
0x26e: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x278:                      | cdone:
0x278: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x280:                      | 	.align 8
0x280:                      | src:
0x280: 0100000000000000     | 	.quad 1
0x288: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x290:                      | 	.align 16
0x290:                      | Predest:
0x290: fadebc0000000000     | 	.quad 0xbcdefa
0x298:                      | dest:
0x298: abefcd0000000000     | 	.quad 0xcdefab
0x2a0:                      | Postdest:
0x2a0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x2a8:                      | .align 8
                            | # Run time stack
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
                            | 
0x328:                      | Stack:
