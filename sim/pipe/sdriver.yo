                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f64804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | #	Name: Paul Johnson
                            | #	HawkId: pjohnson16
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | #	Using a loop unrolling, I was able to limit the number of times
                            | #	the loop condition needed to be checked. This also meant that
                            | #	I had to figure out a way to deal with the clean up afterwards.
                            | #	This was because not every solution is divisible by 2, 5, or 10
                            | #	so we inevidably had left-over items not being copied.
                            | #
                            | #	This was dealt with using a jump-table which allowed me to
                            | #	arithmetically determine the number of items needed to be dealt
                            | #	with at the end. Using basic addition, I took the number of remaining
                            | #	items and extrapilated out the address of the associated jump marker
                            | #	and then used that value as an offset and then pushed that value so
                            | #	the next execution would be in the location of the determined location.
                            | #	This allowed me to forgo using a collection of conditional jumps. This
                            | #	helped improve the performance of the cleanup.
                            | #
                            | #	I also implemented the iaddq instruction as I did in the last assignment.
                            | #	This was helpful because the number of instructions needed to check a
                            | #	values positivity was halved. This helped performance quite a bit.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax			# count = 0;
0x034: c0f2f6ffffffffffffff | 	iaddq $-10,%rdx			# Increment 10 because its a do-while loop.
0x03e: 710802000000000000   | 	jle Remaining			# If 10 or fewer items then do not enter loop
                            | 
0x047:                      | GetFirst5Items:
                            | 	# Retrieve the first 5 items and copy them to the destination block.
0x047: 50170000000000000000 | 	mrmovq (%rdi),%rcx		# Get value of item 1
0x051: 50870800000000000000 | 	mrmovq $8(%rdi),%r8     # Get value of item 2
0x05b: 50971000000000000000 | 	mrmovq $16(%rdi),%r9    # Get value of item 3
0x065: 50a71800000000000000 | 	mrmovq $24(%rdi),%r10   # Get value of item 4
0x06f: 50b72000000000000000 | 	mrmovq $32(%rdi),%r11   # Get value of item 5
0x079: 40160000000000000000 | 	rmmovq %rcx,(%rsi)		# Copy value to dst 1
0x083: 40860800000000000000 | 	rmmovq %r8,$8(%rsi)     # Copy value to dst 2
0x08d: 40961000000000000000 | 	rmmovq %r9,$16(%rsi)    # Copy value to dst 3
0x097: 40a61800000000000000 | 	rmmovq %r10,$24(%rsi)   # Copy value to dst 4
0x0a1: 40b62000000000000000 | 	rmmovq %r11,$32(%rsi)   # Copy value to dst 5
                            | 
0x0ab: 6211                 | 	andq %rcx,%rcx			# If value <= 0, jump to next
0x0ad: 71c000000000000000   | 	jle CheckItem2			# Ensures the value is positive
0x0b6: c0f00100000000000000 | 	iaddq $1,%rax          	# count++
                            | 
0x0c0:                      | CheckItem2:
0x0c0: 6288                 | 	andq %r8,%r8         	# If value <= 0, jump to next
0x0c2: 71d500000000000000   | 	jle CheckItem3			# Ensures the value is positive
0x0cb: c0f00100000000000000 | 	iaddq $1,%rax         	# count++
                            | 
0x0d5:                      | CheckItem3:
0x0d5: 6299                 | 	andq %r9,%r9         	# If value <= 0, jump to next
0x0d7: 71ea00000000000000   | 	jle CheckItem4			# Ensures the value is positive
0x0e0: c0f00100000000000000 | 	iaddq $1,%rax         	# count++
                            | 
0x0ea:                      | CheckItem4:
0x0ea: 62aa                 | 	andq %r10,%r10          # If value <= 0, jump to next
0x0ec: 71ff00000000000000   | 	jle CheckItem5			# Ensures the value is positive
0x0f5: c0f00100000000000000 | 	iaddq $1,%rax         	# count++
                            | 
0x0ff:                      | CheckItem5:
0x0ff: 62bb                 | 	andq %r11,%r11          # If value <= 0, jump to next
0x101: 711401000000000000   | 	jle GetNext5Items		# Ensures the value is positive
0x10a: c0f00100000000000000 | 	iaddq $1,%rax         	# count++
                            | 
0x114:                      | GetNext5Items:
                            | 	# Needed to re-use the registers since there aren't enough
                            | 	# to effectively use 10 of them.
                            | 	# Since we are still in the same iteration of the loop,
                            | 	# the  pointers haven't been updated sp we continue
                            | 	# form where we left off.
0x114: 50172800000000000000 | 	mrmovq $40(%rdi), %rcx   # Get value of item 1
0x11e: 50873000000000000000 | 	mrmovq $48(%rdi), %r8    # Get value of item 2
0x128: 50973800000000000000 | 	mrmovq $56(%rdi), %r9    # Get value of item 3
0x132: 50a74000000000000000 | 	mrmovq $64(%rdi), %r10   # Get value of item 4
0x13c: 50b74800000000000000 | 	mrmovq $72(%rdi), %r11   # Get value of item 5
0x146: 40162800000000000000 | 	rmmovq %rcx, $40(%rsi)   # Copy value to dst 1
0x150: 40863000000000000000 | 	rmmovq %r8, $48(%rsi)    # Copy value to dst 2
0x15a: 40963800000000000000 | 	rmmovq %r9, $56(%rsi)    # Copy value to dst 3
0x164: 40a64000000000000000 | 	rmmovq %r10, $64(%rsi)   # Copy value to dst 4
0x16e: 40b64800000000000000 | 	rmmovq %r11, $72(%rsi)   # Copy value to dst 5
                            | 
0x178:                      | CheckItem6:
0x178: 6211                 | 	andq %rcx,%rcx         	# If item 5 is not positive, skip to next value
0x17a: 718d01000000000000   | 	jle CheckItem7			# Ensures the value is positive
0x183: c0f00100000000000000 | 	iaddq $1,%rax         	# count++
                            | 
0x18d:                      | CheckItem7:
0x18d: 6288                 | 	andq %r8,%r8         	# If item 6 is not positive, skip to next value
0x18f: 71a201000000000000   | 	jle CheckItem8			# Ensures the value is positive
0x198: c0f00100000000000000 | 	iaddq $1,%rax         	# count++
                            | 
0x1a2:                      | CheckItem8:
0x1a2: 6299                 | 	andq %r9,%r9         	# If item 7 is not positive, skip to next value
0x1a4: 71b701000000000000   | 	jle CheckItem9			# Ensures the value is positive
0x1ad: c0f00100000000000000 | 	iaddq $1, %rax         	# count++
                            | 
0x1b7:                      | CheckItem9:
0x1b7: 62aa                 | 	andq %r10,%r10         	# If item 8 is not positive, skip to next value
0x1b9: 71cc01000000000000   | 	jle CheckItem10			# Ensures the value is positive
0x1c2: c0f00100000000000000 | 	iaddq $1,%rax         	# count++
                            | 	
0x1cc:                      | CheckItem10:
0x1cc: 62bb                 | 	andq %r11,%r11         	# If item 9 is not positive, skip to next value
0x1ce: 71e101000000000000   | 	jle IterateLoop			# Ensures the value is positive
0x1d7: c0f00100000000000000 | 	iaddq $1,%rax         	# count++
                            | 
0x1e1:                      | IterateLoop:
0x1e1: c0f75000000000000000 | 	iaddq $80,%rdi			# Iterate the pointer to the source block
0x1eb: c0f65000000000000000 | 	iaddq $80,%rsi			# Iterate the pointer rto the destination block
0x1f5: c0f2f6ffffffffffffff | 	iaddq $-10,%rdx			# Check if the loop should be re-entered
0x1ff: 764700000000000000   | 	jg GetFirst5Items		# Re-enter loop if more than 10 items left
                            | 
0x208:                      | Remaining:
0x208: 6022                 | 	addq %rdx,%rdx			# len *= 8;
0x20a: 6022                 | 	addq %rdx,%rdx
0x20c: 6022                 | 	addq %rdx,%rdx
0x20e: 50220f04000000000000 | 	mrmovq EndOfTable(%rdx),%rdx # use a jumptable to deal with the remaining items
0x218: a02f                 | 	pushq %rdx				# jmp *(EndOfTable + 8*(len0 - 10))
0x21a: 90                   | 	ret
                            | 
                            | # 10 items remain
0x21b:                      | ItemCnt10:	
0x21b: 50a74800000000000000 | 	mrmovq $72(%rdi),%r10	# Get the value for item 10
0x225: 40a64800000000000000 | 	rmmovq %r10,$72(%rsi)	# Save the value to source block
0x22f: 62aa                 | 	andq %r10,%r10         	# If item 10 is not positive, skip to next value
0x231: 714402000000000000   | 	jle ItemCnt9			# Ensures the value is positive
0x23a: c0f00100000000000000 | 	iaddq $1,%rax         	# count++
                            | 
                            | # 9 items remaining
0x244:                      | ItemCnt9:
0x244: 50a74000000000000000 | 	mrmovq $64(%rdi),%r10	# Get the value for item 9
0x24e: 40a64000000000000000 | 	rmmovq %r10,$64(%rsi)	# Save the value to source block
0x258: 62aa                 | 	andq %r10,%r10         	# If item 9 is not positive, skip to next value
0x25a: 716d02000000000000   | 	jle ItemCnt8			# Ensures the value is positive
0x263: c0f00100000000000000 | 	iaddq $1,%rax			# count++
                            | 
                            | # 8 items remaining
0x26d:                      | ItemCnt8:	
0x26d: 50a73800000000000000 | 	mrmovq $56(%rdi),%r10	# Get the value for item 8
0x277: 40a63800000000000000 | 	rmmovq %r10,$56(%rsi)	# Save the value to source block
0x281: 62aa                 | 	andq %r10,%r10         	# If item 8 is not positive, skip to next value
0x283: 719602000000000000   | 	jle ItemCnt7			# Ensures the value is positive
0x28c: c0f00100000000000000 | 	iaddq $1,%rax			# count++
                            | 
                            | # 7 items remaining
0x296:                      | ItemCnt7:	
0x296: 50a73000000000000000 | 	mrmovq $48(%rdi),%r10	# Get the value for item 7
0x2a0: 40a63000000000000000 | 	rmmovq %r10,$48(%rsi)	# Save the value to source block
0x2aa: 62aa                 | 	andq %r10, %r10         # If item 7 is not positive, skip to next value
0x2ac: 71bf02000000000000   | 	jle ItemCnt6			# Ensures the value is positive
0x2b5: c0f00100000000000000 | 	iaddq $1,%rax			# count++
                            | 
                            | # 6 items remaining
0x2bf:                      | ItemCnt6:	
0x2bf: 50a72800000000000000 | 	mrmovq $40(%rdi),%r10	# Get the value for item 6
0x2c9: 40a62800000000000000 | 	rmmovq %r10,$40(%rsi)	# Save the value to source block
0x2d3: 62aa                 | 	andq %r10,%r10         	# If item 6 is not positive, skip to next value
0x2d5: 71e802000000000000   | 	jle ItemCnt5			# Ensures the value is positive
0x2de: c0f00100000000000000 | 	iaddq $1, %rax			# count++
                            | 
                            | # 5 items remaining
0x2e8:                      | ItemCnt5:	
0x2e8: 50a72000000000000000 | 	mrmovq $32(%rdi),%r10	# Get the value for item 5
0x2f2: 40a62000000000000000 | 	rmmovq %r10,$32(%rsi)	# Save the value to source block
0x2fc: 62aa                 | 	andq %r10,%r10         	# If item 5 is not positive, skip to next value
0x2fe: 711103000000000000   | 	jle ItemCnt4			# Ensures the value is positive
0x307: c0f00100000000000000 | 	iaddq $1,%rax			# count++
                            | 
                            | # 4 items remaining
0x311:                      | ItemCnt4:	
0x311: 50a71800000000000000 | 	mrmovq $24(%rdi),%r10	# Get the value for item 4
0x31b: 40a61800000000000000 | 	rmmovq %r10,$24(%rsi)	# Save the value to source block
0x325: 62aa                 | 	andq %r10,%r10         	# If item 4 is not positive, skip to next value
0x327: 713a03000000000000   | 	jle ItemCnt3			# Ensures the value is positive
0x330: c0f00100000000000000 | 	iaddq $1,%rax			# count++
                            | 
                            | # 3 items remaining
0x33a:                      | ItemCnt3:	
0x33a: 50a71000000000000000 | 	mrmovq $16(%rdi),%r10	# Get the value for item 3
0x344: 40a61000000000000000 | 	rmmovq %r10,$16(%rsi)	# Save the value to source block
0x34e: 62aa                 | 	andq %r10,%r10         	# If item 3 is not positive, skip to next value
0x350: 716303000000000000   | 	jle ItemCnt2			# Ensures the value is positive
0x359: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
                            | # 2 items remaining
0x363:                      | ItemCnt2:	
0x363: 50a70800000000000000 | 	mrmovq $8(%rdi),%r10	# Get the value for item 2
0x36d: 40a60800000000000000 | 	rmmovq %r10,$8(%rsi)	# Save the value to source block
0x377: 62aa                 | 	andq %r10,%r10         	# If item 2 is not positive, skip to next value
0x379: 718c03000000000000   | 	jle ItemCnt1			# Ensures the value is positive
0x382: c0f00100000000000000 | 	iaddq $1,%rax			# count++
                            | 
                            | # 1 item remaining
0x38c:                      | ItemCnt1:	
0x38c: 50a70000000000000000 | 	mrmovq (%rdi),%r10		# Get the value for item 1
0x396: 40a60000000000000000 | 	rmmovq %r10,(%rsi)		# Save the value to source block
0x3a0: 62aa                 | 	andq %r10,%r10         	# If item 1 is not positive, skip to next value
0x3a2: 71be03000000000000   | 	jle Done				# Ensures the value is positive
0x3ab: c0f00100000000000000 | 	iaddq $1,%rax			# count++
                            | 
                            | # No more items left; Execution done
0x3b5:                      | ItemCnt0:	
0x3b5: 70be03000000000000   | 	jmp Done
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3be:                      | Done:
0x3be: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
                            | # Jump table is used for the remaining values after the loop is
                            | # done executing. We use a jump table in order to allow fal-through
                            | # as well as allow for a more dynamic execution of the cleanup based
                            | # on arithmetic rather than a miriad of conditional jumps. This helps
                            | # improve performance by limiting the number of mispredicted jumps.
0x3bf:                      | StartOfTable:
0x3bf: b503000000000000     | 	.quad	ItemCnt0
0x3c7: 8c03000000000000     | 	.quad	ItemCnt1
0x3cf: 6303000000000000     | 	.quad	ItemCnt2
0x3d7: 3a03000000000000     | 	.quad	ItemCnt3
0x3df: 1103000000000000     | 	.quad	ItemCnt4
0x3e7: e802000000000000     | 	.quad	ItemCnt5
0x3ef: bf02000000000000     | 	.quad	ItemCnt6
0x3f7: 9602000000000000     | 	.quad	ItemCnt7
0x3ff: 6d02000000000000     | 	.quad	ItemCnt8
0x407: 4402000000000000     | 	.quad	ItemCnt9
0x40f: 1b02000000000000     | EndOfTable:	.quad	ItemCnt10
                            | 
0x417:                      | End:
                            | #/* $end ncopy-ys */
0x417:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x418:                      | 	.align 8
0x418:                      | src:
0x418: ffffffffffffffff     | 	.quad -1
0x420: 0200000000000000     | 	.quad 2
0x428: fdffffffffffffff     | 	.quad -3
0x430: 0400000000000000     | 	.quad 4
0x438: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x440:                      | 	.align 16
0x440:                      | Predest:
0x440: fadebc0000000000     | 	.quad 0xbcdefa
0x448:                      | dest:
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468:                      | Postdest:
0x468: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x470:                      | .align 8
                            | # Run time stack
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
                            | 
0x4f0:                      | Stack:
