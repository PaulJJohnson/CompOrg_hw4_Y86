0x000:                      |     .pos 0
0x000:                      | init:
0x000: 30f40002000000000000 |     irmovq  Stack, %rsp     # Set up stack pointer
0x00a: 2045                 |     rrmovq  %rsp,%rbp       # Set up base pointer
0x00c: 30f73000000000000000 |     irmovq  ele1,%rdi
0x016: 30f81800000000000000 |     irmovq  $0x18, %r8        #Note 1 : unsure of what this should be
0x020: 806000000000000000   |     call    rsum_list        # Execute main program
0x029: 00                   |     halt                    # Terminate program
                            | 
                            | # Sample linked list
0x030:                      |     .align 8
0x030:                      | ele1:   
0x030: 0000000000000000     |     .quad 0x00
0x038: 4000000000000000     |     .quad ele2
0x040:                      | ele2:
0x040: b000000000000000     |     .quad 0x0b0
0x048: 5000000000000000     |     .quad ele3
0x050:                      | ele3:   
0x050: 000c000000000000     |     .quad 0xc00
0x058: 0000000000000000     |     .quad 0
                            | 
                            |     # int sum_list(list_ptr ls)
0x060:                      | rsum_list:
0x060: a05f                 |     pushq   %rbp
0x062: 2045                 |     rrmovq  %rsp,%rbp
0x064: 6300                 |     xorq    %rax,%rax       # val = 0
0x066: 6184                 |     subq %r8, %rsp              #subtract constant from rsp , not sure why we need to do this -> saw this in x86 code
0x068: 407f0000000000000000 |     rmmovq %rdi, $-0x18(%rbp)      #move ls to -18(%rbp)
0x072: 6277                 |     andq %rdi, %rdi             #check if 0   
0x074: 73e200000000000000   |     je End
0x087: 50000000000000000000 |     mrmovq (%rax), %rax            #rax gets ls->val
0x091: 400f0000000000000000 |     rmmovq %rax, $-0x10(%rbp)         #the val obtained is stored in -10(%rbp)
0x0a5: 50000800000000000000 |     mrmovq $0x8(%rax), %rax          # rax gets ls-> next
0x0af: 400f0000000000000000 |     rmmovq %rax, %rdi             #this is copied to rdi for next recursive call
0x0b9: 806000000000000000   |     call rsum_list
0x0c2: 400f0000000000000000 |     rmmovq %rax, $-0x8(%rbp)          #rax will contain ans from recursive call
0x0e0: 6020                 |     addq %rdx, %rax           #adding
0x0e2:                      | End :
0x0e2: 2054                 |     rrmovq %rbp, %rsp
0x0e4: b05f                 |     popq %rbp
0x0e6: 10                   |     nop                     # makes sure stop in 31 steps
0x0e7: 90                   |     ret
                            |     
0x200:                      |     .pos 0x200
0x200:                      | Stack:
